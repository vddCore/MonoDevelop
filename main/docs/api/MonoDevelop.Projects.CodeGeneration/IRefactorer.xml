<Type Name="IRefactorer" FullName="MonoDevelop.Projects.CodeGeneration.IRefactorer">
  <TypeSignature Language="C#" Value="public interface IRefactorer" />
  <AssemblyInfo>
    <AssemblyName>MonoDevelop.Projects</AssemblyName>
    <AssemblyVersion>0.18.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Members>
    <Member MemberName="CreateClass">
      <MemberSignature Language="C#" Value="public MonoDevelop.Projects.Parser.IClass CreateClass (MonoDevelop.Projects.CodeGeneration.RefactorerContext ctx, string directory, string namspace, System.CodeDom.CodeTypeDeclaration type);" />
      <MemberType>Method</MemberType>
      <ReturnValue><ReturnType>MonoDevelop.Projects.Parser.IClass</ReturnType></ReturnValue>
      <Parameters><Parameter Name="ctx" Type="MonoDevelop.Projects.CodeGeneration.RefactorerContext" /><Parameter Name="directory" Type="System.String" /><Parameter Name="namspace" Type="System.String" /><Parameter Name="type" Type="System.CodeDom.CodeTypeDeclaration" /></Parameters>
      <Docs><param name="ctx">To be added.</param><param name="directory">To be added.</param><param name="namspace">To be added.</param><param name="type">To be added.</param><summary>To be added.</summary><returns>To be added.</returns><remarks>To be added.</remarks></Docs>
    </Member>
    <Member MemberName="RenameClass">
      <MemberSignature Language="C#" Value="public MonoDevelop.Projects.Parser.IClass RenameClass (MonoDevelop.Projects.CodeGeneration.RefactorerContext ctx, MonoDevelop.Projects.Parser.IClass cls, string newName);" />
      <MemberType>Method</MemberType>
      <ReturnValue><ReturnType>MonoDevelop.Projects.Parser.IClass</ReturnType></ReturnValue>
      <Parameters><Parameter Name="ctx" Type="MonoDevelop.Projects.CodeGeneration.RefactorerContext" /><Parameter Name="cls" Type="MonoDevelop.Projects.Parser.IClass" /><Parameter Name="newName" Type="System.String" /></Parameters>
      <Docs><param name="ctx">To be added.</param><param name="cls">To be added.</param><param name="newName">To be added.</param><summary>To be added.</summary><returns>To be added.</returns><remarks>To be added.</remarks></Docs>
    </Member>
    <Member MemberName="FindClassReferences">
      <MemberSignature Language="C#" Value="public MonoDevelop.Projects.CodeGeneration.MemberReferenceCollection FindClassReferences (MonoDevelop.Projects.CodeGeneration.RefactorerContext ctx, string fileName, MonoDevelop.Projects.Parser.IClass cls);" />
      <MemberType>Method</MemberType>
      <ReturnValue><ReturnType>MonoDevelop.Projects.CodeGeneration.MemberReferenceCollection</ReturnType></ReturnValue>
      <Parameters><Parameter Name="ctx" Type="MonoDevelop.Projects.CodeGeneration.RefactorerContext" /><Parameter Name="fileName" Type="System.String" /><Parameter Name="cls" Type="MonoDevelop.Projects.Parser.IClass" /></Parameters>
      <Docs><param name="ctx">To be added.</param><param name="fileName">To be added.</param><param name="cls">To be added.</param><summary>To be added.</summary><returns>To be added.</returns><remarks>To be added.</remarks></Docs>
    </Member>
    <Member MemberName="AddMember">
      <MemberSignature Language="C#" Value="public MonoDevelop.Projects.Parser.IMember AddMember (MonoDevelop.Projects.CodeGeneration.RefactorerContext ctx, MonoDevelop.Projects.Parser.IClass cls, System.CodeDom.CodeTypeMember memberInfo);" />
      <MemberType>Method</MemberType>
      <ReturnValue><ReturnType>MonoDevelop.Projects.Parser.IMember</ReturnType></ReturnValue>
      <Parameters><Parameter Name="ctx" Type="MonoDevelop.Projects.CodeGeneration.RefactorerContext" /><Parameter Name="cls" Type="MonoDevelop.Projects.Parser.IClass" /><Parameter Name="memberInfo" Type="System.CodeDom.CodeTypeMember" /></Parameters>
      <Docs><param name="ctx">To be added.</param><param name="cls">To be added.</param><param name="memberInfo">To be added.</param><summary>To be added.</summary><returns>To be added.</returns><remarks>To be added.</remarks></Docs>
    </Member>
    <Member MemberName="RemoveMember">
      <MemberSignature Language="C#" Value="public void RemoveMember (MonoDevelop.Projects.CodeGeneration.RefactorerContext ctx, MonoDevelop.Projects.Parser.IClass cls, MonoDevelop.Projects.Parser.IMember member);" />
      <MemberType>Method</MemberType>
      <ReturnValue><ReturnType>System.Void</ReturnType></ReturnValue>
      <Parameters><Parameter Name="ctx" Type="MonoDevelop.Projects.CodeGeneration.RefactorerContext" /><Parameter Name="cls" Type="MonoDevelop.Projects.Parser.IClass" /><Parameter Name="member" Type="MonoDevelop.Projects.Parser.IMember" /></Parameters>
      <Docs><param name="ctx">To be added.</param><param name="cls">To be added.</param><param name="member">To be added.</param><summary>To be added.</summary><remarks>To be added.</remarks></Docs>
    </Member>
    <Member MemberName="RenameMember">
      <MemberSignature Language="C#" Value="public MonoDevelop.Projects.Parser.IMember RenameMember (MonoDevelop.Projects.CodeGeneration.RefactorerContext ctx, MonoDevelop.Projects.Parser.IClass cls, MonoDevelop.Projects.Parser.IMember member, string newName);" />
      <MemberType>Method</MemberType>
      <ReturnValue><ReturnType>MonoDevelop.Projects.Parser.IMember</ReturnType></ReturnValue>
      <Parameters><Parameter Name="ctx" Type="MonoDevelop.Projects.CodeGeneration.RefactorerContext" /><Parameter Name="cls" Type="MonoDevelop.Projects.Parser.IClass" /><Parameter Name="member" Type="MonoDevelop.Projects.Parser.IMember" /><Parameter Name="newName" Type="System.String" /></Parameters>
      <Docs><param name="ctx">To be added.</param><param name="cls">To be added.</param><param name="member">To be added.</param><param name="newName">To be added.</param><summary>To be added.</summary><returns>To be added.</returns><remarks>To be added.</remarks></Docs>
    </Member>
    <Member MemberName="ReplaceMember">
      <MemberSignature Language="C#" Value="public MonoDevelop.Projects.Parser.IMember ReplaceMember (MonoDevelop.Projects.CodeGeneration.RefactorerContext ctx, MonoDevelop.Projects.Parser.IClass cls, MonoDevelop.Projects.Parser.IMember oldMember, System.CodeDom.CodeTypeMember memberInfo);" />
      <MemberType>Method</MemberType>
      <ReturnValue><ReturnType>MonoDevelop.Projects.Parser.IMember</ReturnType></ReturnValue>
      <Parameters><Parameter Name="ctx" Type="MonoDevelop.Projects.CodeGeneration.RefactorerContext" /><Parameter Name="cls" Type="MonoDevelop.Projects.Parser.IClass" /><Parameter Name="oldMember" Type="MonoDevelop.Projects.Parser.IMember" /><Parameter Name="memberInfo" Type="System.CodeDom.CodeTypeMember" /></Parameters>
      <Docs><param name="ctx">To be added.</param><param name="cls">To be added.</param><param name="oldMember">To be added.</param><param name="memberInfo">To be added.</param><summary>To be added.</summary><returns>To be added.</returns><remarks>To be added.</remarks></Docs>
    </Member>
    <Member MemberName="FindMemberReferences">
      <MemberSignature Language="C#" Value="public MonoDevelop.Projects.CodeGeneration.MemberReferenceCollection FindMemberReferences (MonoDevelop.Projects.CodeGeneration.RefactorerContext ctx, string fileName, MonoDevelop.Projects.Parser.IClass cls, MonoDevelop.Projects.Parser.IMember member);" />
      <MemberType>Method</MemberType>
      <ReturnValue><ReturnType>MonoDevelop.Projects.CodeGeneration.MemberReferenceCollection</ReturnType></ReturnValue>
      <Parameters><Parameter Name="ctx" Type="MonoDevelop.Projects.CodeGeneration.RefactorerContext" /><Parameter Name="fileName" Type="System.String" /><Parameter Name="cls" Type="MonoDevelop.Projects.Parser.IClass" /><Parameter Name="member" Type="MonoDevelop.Projects.Parser.IMember" /></Parameters>
      <Docs><param name="ctx">To be added.</param><param name="fileName">To be added.</param><param name="cls">To be added.</param><param name="member">To be added.</param><summary>To be added.</summary><returns>To be added.</returns><remarks>To be added.</remarks></Docs>
    </Member>
    <Member MemberName="SupportedOperations">
      <MemberSignature Language="C#" Value="public MonoDevelop.Projects.CodeGeneration.RefactorOperations SupportedOperations { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue><ReturnType>MonoDevelop.Projects.CodeGeneration.RefactorOperations</ReturnType></ReturnValue>
      <Docs><summary>To be added.</summary><value>To be added.</value><remarks>To be added.</remarks></Docs>
    </Member>
  <Member MemberName="ConvertToLanguageTypeName"><MemberSignature Language="C#" Value="public string ConvertToLanguageTypeName (string netTypeName);" /><MemberType>Method</MemberType><ReturnValue><ReturnType>System.String</ReturnType></ReturnValue><Parameters><Parameter Name="netTypeName" Type="System.String" /></Parameters><Docs><param name="netTypeName">To be added.</param><summary>To be added.</summary><returns>To be added.</returns><remarks>To be added.</remarks></Docs></Member><Member MemberName="EncapsulateField"><MemberSignature Language="C#" Value="public MonoDevelop.Projects.Parser.IMember EncapsulateField (MonoDevelop.Projects.CodeGeneration.RefactorerContext ctx, MonoDevelop.Projects.Parser.IClass cls, MonoDevelop.Projects.Parser.IField field, string propName);" /><MemberType>Method</MemberType><ReturnValue><ReturnType>MonoDevelop.Projects.Parser.IMember</ReturnType></ReturnValue><Parameters><Parameter Name="ctx" Type="MonoDevelop.Projects.CodeGeneration.RefactorerContext" /><Parameter Name="cls" Type="MonoDevelop.Projects.Parser.IClass" /><Parameter Name="field" Type="MonoDevelop.Projects.Parser.IField" /><Parameter Name="propName" Type="System.String" /></Parameters><Docs><param name="ctx">To be added.</param><param name="cls">To be added.</param><param name="field">To be added.</param><param name="propName">To be added.</param><summary>To be added.</summary><returns>To be added.</returns><remarks>To be added.</remarks></Docs></Member><Member MemberName="FindParameterReferences"><MemberSignature Language="C#" Value="public MonoDevelop.Projects.CodeGeneration.MemberReferenceCollection FindParameterReferences (MonoDevelop.Projects.CodeGeneration.RefactorerContext ctx, string fileName, MonoDevelop.Projects.Parser.IParameter param);" /><MemberType>Method</MemberType><ReturnValue><ReturnType>MonoDevelop.Projects.CodeGeneration.MemberReferenceCollection</ReturnType></ReturnValue><Parameters><Parameter Name="ctx" Type="MonoDevelop.Projects.CodeGeneration.RefactorerContext" /><Parameter Name="fileName" Type="System.String" /><Parameter Name="param" Type="MonoDevelop.Projects.Parser.IParameter" /></Parameters><Docs><param name="ctx">To be added.</param><param name="fileName">To be added.</param><param name="param">To be added.</param><summary>To be added.</summary><returns>To be added.</returns><remarks>To be added.</remarks></Docs></Member><Member MemberName="FindVariableReferences"><MemberSignature Language="C#" Value="public MonoDevelop.Projects.CodeGeneration.MemberReferenceCollection FindVariableReferences (MonoDevelop.Projects.CodeGeneration.RefactorerContext ctx, string fileName, MonoDevelop.Projects.Parser.LocalVariable var);" /><MemberType>Method</MemberType><ReturnValue><ReturnType>MonoDevelop.Projects.CodeGeneration.MemberReferenceCollection</ReturnType></ReturnValue><Parameters><Parameter Name="ctx" Type="MonoDevelop.Projects.CodeGeneration.RefactorerContext" /><Parameter Name="fileName" Type="System.String" /><Parameter Name="var" Type="MonoDevelop.Projects.Parser.LocalVariable" /></Parameters><Docs><param name="ctx">To be added.</param><param name="fileName">To be added.</param><param name="var">To be added.</param><summary>To be added.</summary><returns>To be added.</returns><remarks>To be added.</remarks></Docs></Member><Member MemberName="ImplementMember"><MemberSignature Language="C#" Value="public MonoDevelop.Projects.Parser.IMember ImplementMember (MonoDevelop.Projects.CodeGeneration.RefactorerContext ctx, MonoDevelop.Projects.Parser.IClass cls, MonoDevelop.Projects.Parser.IMember member, MonoDevelop.Projects.Parser.IReturnType privateImplementationType);" /><MemberType>Method</MemberType><ReturnValue><ReturnType>MonoDevelop.Projects.Parser.IMember</ReturnType></ReturnValue><Parameters><Parameter Name="ctx" Type="MonoDevelop.Projects.CodeGeneration.RefactorerContext" /><Parameter Name="cls" Type="MonoDevelop.Projects.Parser.IClass" /><Parameter Name="member" Type="MonoDevelop.Projects.Parser.IMember" /><Parameter Name="privateImplementationType" Type="MonoDevelop.Projects.Parser.IReturnType" /></Parameters><Docs><param name="ctx">To be added.</param><param name="cls">To be added.</param><param name="member">To be added.</param><param name="privateImplementationType">To be added.</param><summary>To be added.</summary><returns>To be added.</returns><remarks>To be added.</remarks></Docs></Member><Member MemberName="RenameParameter"><MemberSignature Language="C#" Value="public bool RenameParameter (MonoDevelop.Projects.CodeGeneration.RefactorerContext ctx, MonoDevelop.Projects.Parser.IParameter param, string newName);" /><MemberType>Method</MemberType><ReturnValue><ReturnType>System.Boolean</ReturnType></ReturnValue><Parameters><Parameter Name="ctx" Type="MonoDevelop.Projects.CodeGeneration.RefactorerContext" /><Parameter Name="param" Type="MonoDevelop.Projects.Parser.IParameter" /><Parameter Name="newName" Type="System.String" /></Parameters><Docs><param name="ctx">To be added.</param><param name="param">To be added.</param><param name="newName">To be added.</param><summary>To be added.</summary><returns>To be added.</returns><remarks>To be added.</remarks></Docs></Member><Member MemberName="RenameVariable"><MemberSignature Language="C#" Value="public bool RenameVariable (MonoDevelop.Projects.CodeGeneration.RefactorerContext ctx, MonoDevelop.Projects.Parser.LocalVariable var, string newName);" /><MemberType>Method</MemberType><ReturnValue><ReturnType>System.Boolean</ReturnType></ReturnValue><Parameters><Parameter Name="ctx" Type="MonoDevelop.Projects.CodeGeneration.RefactorerContext" /><Parameter Name="var" Type="MonoDevelop.Projects.Parser.LocalVariable" /><Parameter Name="newName" Type="System.String" /></Parameters><Docs><param name="ctx">To be added.</param><param name="var">To be added.</param><param name="newName">To be added.</param><summary>To be added.</summary><returns>To be added.</returns><remarks>To be added.</remarks></Docs></Member></Members>
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
</Type>
