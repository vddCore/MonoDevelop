<Type Name="CodeRefactorer" FullName="MonoDevelop.Projects.CodeGeneration.CodeRefactorer">
  <TypeSignature Language="C#" Value="public class CodeRefactorer" />
  <AssemblyInfo>
    <AssemblyName>MonoDevelop.Projects</AssemblyName>
    <AssemblyVersion>0.18.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CodeRefactorer (MonoDevelop.Projects.Combine rootCombine, MonoDevelop.Projects.Parser.IParserDatabase pdb);" />
      <MemberType>Constructor</MemberType>
      <Parameters><Parameter Name="rootCombine" Type="MonoDevelop.Projects.Combine" /><Parameter Name="pdb" Type="MonoDevelop.Projects.Parser.IParserDatabase" /></Parameters>
      <Docs><param name="rootCombine">To be added.</param><param name="pdb">To be added.</param><summary>To be added.</summary><remarks>To be added.</remarks></Docs>
    </Member>
    <Member MemberName="CreateClass">
      <MemberSignature Language="C#" Value="public MonoDevelop.Projects.Parser.IClass CreateClass (MonoDevelop.Projects.Project project, string language, string directory, string namspace, System.CodeDom.CodeTypeDeclaration type);" />
      <MemberType>Method</MemberType>
      <ReturnValue><ReturnType>MonoDevelop.Projects.Parser.IClass</ReturnType></ReturnValue>
      <Parameters><Parameter Name="project" Type="MonoDevelop.Projects.Project" /><Parameter Name="language" Type="System.String" /><Parameter Name="directory" Type="System.String" /><Parameter Name="namspace" Type="System.String" /><Parameter Name="type" Type="System.CodeDom.CodeTypeDeclaration" /></Parameters>
      <Docs><param name="project">To be added.</param><param name="language">To be added.</param><param name="directory">To be added.</param><param name="namspace">To be added.</param><param name="type">To be added.</param><summary>To be added.</summary><returns>To be added.</returns><remarks>To be added.</remarks></Docs>
    </Member>
    <Member MemberName="AddMember">
      <MemberSignature Language="C#" Value="public MonoDevelop.Projects.Parser.IMember AddMember (MonoDevelop.Projects.Parser.IClass cls, System.CodeDom.CodeTypeMember member);" />
      <MemberType>Method</MemberType>
      <ReturnValue><ReturnType>MonoDevelop.Projects.Parser.IMember</ReturnType></ReturnValue>
      <Parameters><Parameter Name="cls" Type="MonoDevelop.Projects.Parser.IClass" /><Parameter Name="member" Type="System.CodeDom.CodeTypeMember" /></Parameters>
      <Docs><param name="cls">To be added.</param><param name="member">To be added.</param><summary>To be added.</summary><returns>To be added.</returns><remarks>To be added.</remarks></Docs>
    </Member>
    <Member MemberName="RemoveMember">
      <MemberSignature Language="C#" Value="public void RemoveMember (MonoDevelop.Projects.Parser.IClass cls, MonoDevelop.Projects.Parser.IMember member);" />
      <MemberType>Method</MemberType>
      <ReturnValue><ReturnType>System.Void</ReturnType></ReturnValue>
      <Parameters><Parameter Name="cls" Type="MonoDevelop.Projects.Parser.IClass" /><Parameter Name="member" Type="MonoDevelop.Projects.Parser.IMember" /></Parameters>
      <Docs><param name="cls">To be added.</param><param name="member">To be added.</param><summary>To be added.</summary><remarks>To be added.</remarks></Docs>
    </Member>
    <Member MemberName="ReplaceMember">
      <MemberSignature Language="C#" Value="public MonoDevelop.Projects.Parser.IMember ReplaceMember (MonoDevelop.Projects.Parser.IClass cls, MonoDevelop.Projects.Parser.IMember oldMember, System.CodeDom.CodeTypeMember member);" />
      <MemberType>Method</MemberType>
      <ReturnValue><ReturnType>MonoDevelop.Projects.Parser.IMember</ReturnType></ReturnValue>
      <Parameters><Parameter Name="cls" Type="MonoDevelop.Projects.Parser.IClass" /><Parameter Name="oldMember" Type="MonoDevelop.Projects.Parser.IMember" /><Parameter Name="member" Type="System.CodeDom.CodeTypeMember" /></Parameters>
      <Docs><param name="cls">To be added.</param><param name="oldMember">To be added.</param><param name="member">To be added.</param><summary>To be added.</summary><returns>To be added.</returns><remarks>To be added.</remarks></Docs>
    </Member>
    <Member MemberName="TextFileProvider">
      <MemberSignature Language="C#" Value="public MonoDevelop.Projects.Text.ITextFileProvider TextFileProvider { set; get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue><ReturnType>MonoDevelop.Projects.Text.ITextFileProvider</ReturnType></ReturnValue>
      <Docs><summary>To be added.</summary><value>To be added.</value><remarks>To be added.</remarks></Docs>
    </Member>
    
    <Member MemberName="FindClassReferences">
      <MemberSignature Language="C#" Value="public MonoDevelop.Projects.CodeGeneration.MemberReferenceCollection FindClassReferences (MonoDevelop.Core.IProgressMonitor monitor, MonoDevelop.Projects.Parser.IClass cls, MonoDevelop.Projects.CodeGeneration.RefactoryScope scope);" />
      <MemberType>Method</MemberType>
      <ReturnValue><ReturnType>MonoDevelop.Projects.CodeGeneration.MemberReferenceCollection</ReturnType></ReturnValue>
      <Parameters><Parameter Name="monitor" Type="MonoDevelop.Core.IProgressMonitor" /><Parameter Name="cls" Type="MonoDevelop.Projects.Parser.IClass" /><Parameter Name="scope" Type="MonoDevelop.Projects.CodeGeneration.RefactoryScope" /></Parameters>
      <Docs><param name="monitor">To be added.</param><param name="cls">To be added.</param><param name="scope">To be added.</param><summary>To be added.</summary><returns>To be added.</returns><remarks>To be added.</remarks></Docs>
    </Member>
    <Member MemberName="RenameMember">
      <MemberSignature Language="C#" Value="public MonoDevelop.Projects.Parser.IMember RenameMember (MonoDevelop.Core.IProgressMonitor monitor, MonoDevelop.Projects.Parser.IClass cls, MonoDevelop.Projects.Parser.IMember member, string newName, MonoDevelop.Projects.CodeGeneration.RefactoryScope scope);" />
      <MemberType>Method</MemberType>
      <ReturnValue><ReturnType>MonoDevelop.Projects.Parser.IMember</ReturnType></ReturnValue>
      <Parameters><Parameter Name="monitor" Type="MonoDevelop.Core.IProgressMonitor" /><Parameter Name="cls" Type="MonoDevelop.Projects.Parser.IClass" /><Parameter Name="member" Type="MonoDevelop.Projects.Parser.IMember" /><Parameter Name="newName" Type="System.String" /><Parameter Name="scope" Type="MonoDevelop.Projects.CodeGeneration.RefactoryScope" /></Parameters>
      <Docs><param name="monitor">To be added.</param><param name="cls">To be added.</param><param name="member">To be added.</param><param name="newName">To be added.</param><param name="scope">To be added.</param><summary>To be added.</summary><returns>To be added.</returns><remarks>To be added.</remarks></Docs>
    </Member>
    <Member MemberName="FindMemberReferences">
      <MemberSignature Language="C#" Value="public MonoDevelop.Projects.CodeGeneration.MemberReferenceCollection FindMemberReferences (MonoDevelop.Core.IProgressMonitor monitor, MonoDevelop.Projects.Parser.IClass cls, MonoDevelop.Projects.Parser.IMember member, MonoDevelop.Projects.CodeGeneration.RefactoryScope scope);" />
      <MemberType>Method</MemberType>
      <ReturnValue><ReturnType>MonoDevelop.Projects.CodeGeneration.MemberReferenceCollection</ReturnType></ReturnValue>
      <Parameters><Parameter Name="monitor" Type="MonoDevelop.Core.IProgressMonitor" /><Parameter Name="cls" Type="MonoDevelop.Projects.Parser.IClass" /><Parameter Name="member" Type="MonoDevelop.Projects.Parser.IMember" /><Parameter Name="scope" Type="MonoDevelop.Projects.CodeGeneration.RefactoryScope" /></Parameters>
      <Docs><param name="monitor">To be added.</param><param name="cls">To be added.</param><param name="member">To be added.</param><param name="scope">To be added.</param><summary>To be added.</summary><returns>To be added.</returns><remarks>To be added.</remarks></Docs>
    </Member>
  <Member MemberName=".ctor"><MemberSignature Language="C#" Value="public CodeRefactorer (MonoDevelop.Projects.Parser.IParserDatabase pdb);" /><MemberType>Constructor</MemberType><Parameters><Parameter Name="pdb" Type="MonoDevelop.Projects.Parser.IParserDatabase" /></Parameters><Docs><param name="pdb">To be added.</param><summary>To be added.</summary><remarks>To be added.</remarks></Docs></Member><Member MemberName="EncapsulateField"><MemberSignature Language="C#" Value="public MonoDevelop.Projects.Parser.IMember EncapsulateField (MonoDevelop.Core.IProgressMonitor monitor, MonoDevelop.Projects.Parser.IClass cls, MonoDevelop.Projects.Parser.IField field, string propName, bool updateInternalRefs);" /><MemberType>Method</MemberType><ReturnValue><ReturnType>MonoDevelop.Projects.Parser.IMember</ReturnType></ReturnValue><Parameters><Parameter Name="monitor" Type="MonoDevelop.Core.IProgressMonitor" /><Parameter Name="cls" Type="MonoDevelop.Projects.Parser.IClass" /><Parameter Name="field" Type="MonoDevelop.Projects.Parser.IField" /><Parameter Name="propName" Type="System.String" /><Parameter Name="updateInternalRefs" Type="System.Boolean" /></Parameters><Docs><param name="monitor">To be added.</param><param name="cls">To be added.</param><param name="field">To be added.</param><param name="propName">To be added.</param><param name="updateInternalRefs">To be added.</param><summary>To be added.</summary><returns>To be added.</returns><remarks>To be added.</remarks></Docs></Member><Member MemberName="FindDerivedClasses"><MemberSignature Language="C#" Value="public MonoDevelop.Projects.Parser.IClass[] FindDerivedClasses (MonoDevelop.Projects.Parser.IClass baseClass);" /><MemberType>Method</MemberType><ReturnValue><ReturnType>MonoDevelop.Projects.Parser.IClass[]</ReturnType></ReturnValue><Parameters><Parameter Name="baseClass" Type="MonoDevelop.Projects.Parser.IClass" /></Parameters><Docs><param name="baseClass">To be added.</param><summary>To be added.</summary><returns>To be added.</returns><remarks>To be added.</remarks></Docs></Member><Member MemberName="ImplementInterface"><MemberSignature Language="C#" Value="public MonoDevelop.Projects.Parser.IClass ImplementInterface (MonoDevelop.Projects.Parser.IParseInformation pinfo, MonoDevelop.Projects.Parser.IClass klass, MonoDevelop.Projects.Parser.IClass iface, bool explicitly, MonoDevelop.Projects.Parser.IClass declaringClass, MonoDevelop.Projects.Parser.IReturnType hintReturnType);" /><MemberType>Method</MemberType><ReturnValue><ReturnType>MonoDevelop.Projects.Parser.IClass</ReturnType></ReturnValue><Parameters><Parameter Name="pinfo" Type="MonoDevelop.Projects.Parser.IParseInformation" /><Parameter Name="klass" Type="MonoDevelop.Projects.Parser.IClass" /><Parameter Name="iface" Type="MonoDevelop.Projects.Parser.IClass" /><Parameter Name="explicitly" Type="System.Boolean" /><Parameter Name="declaringClass" Type="MonoDevelop.Projects.Parser.IClass" /><Parameter Name="hintReturnType" Type="MonoDevelop.Projects.Parser.IReturnType" /></Parameters><Docs><param name="pinfo">To be added.</param><param name="klass">To be added.</param><param name="iface">To be added.</param><param name="explicitly">To be added.</param><param name="declaringClass">To be added.</param><param name="hintReturnType">To be added.</param><summary>To be added.</summary><returns>To be added.</returns><remarks>To be added.</remarks></Docs></Member><Member MemberName="ImplementMember"><MemberSignature Language="C#" Value="public MonoDevelop.Projects.Parser.IMember ImplementMember (MonoDevelop.Projects.Parser.IClass cls, MonoDevelop.Projects.Parser.IMember member, MonoDevelop.Projects.Parser.IReturnType privateReturnType);" /><MemberType>Method</MemberType><ReturnValue><ReturnType>MonoDevelop.Projects.Parser.IMember</ReturnType></ReturnValue><Parameters><Parameter Name="cls" Type="MonoDevelop.Projects.Parser.IClass" /><Parameter Name="member" Type="MonoDevelop.Projects.Parser.IMember" /><Parameter Name="privateReturnType" Type="MonoDevelop.Projects.Parser.IReturnType" /></Parameters><Docs><param name="cls">To be added.</param><param name="member">To be added.</param><param name="privateReturnType">To be added.</param><summary>To be added.</summary><returns>To be added.</returns><remarks>To be added.</remarks></Docs></Member><Member MemberName="RemoveGenericParamSuffix"><MemberSignature Language="C#" Value="public static string RemoveGenericParamSuffix (string name);" /><MemberType>Method</MemberType><ReturnValue><ReturnType>System.String</ReturnType></ReturnValue><Parameters><Parameter Name="name" Type="System.String" /></Parameters><Docs><param name="name">To be added.</param><summary>To be added.</summary><returns>To be added.</returns><remarks>To be added.</remarks></Docs></Member><Member MemberName="RenameClass"><MemberSignature Language="C#" Value="public MonoDevelop.Projects.Parser.IClass RenameClass (MonoDevelop.Core.IProgressMonitor monitor, MonoDevelop.Projects.Parser.IClass cls, string newName, MonoDevelop.Projects.CodeGeneration.RefactoryScope scope);" /><MemberType>Method</MemberType><ReturnValue><ReturnType>MonoDevelop.Projects.Parser.IClass</ReturnType></ReturnValue><Parameters><Parameter Name="monitor" Type="MonoDevelop.Core.IProgressMonitor" /><Parameter Name="cls" Type="MonoDevelop.Projects.Parser.IClass" /><Parameter Name="newName" Type="System.String" /><Parameter Name="scope" Type="MonoDevelop.Projects.CodeGeneration.RefactoryScope" /></Parameters><Docs><param name="monitor">To be added.</param><param name="cls">To be added.</param><param name="newName">To be added.</param><param name="scope">To be added.</param><summary>To be added.</summary><returns>To be added.</returns><remarks>To be added.</remarks></Docs></Member><Member MemberName="RenameParameter"><MemberSignature Language="C#" Value="public bool RenameParameter (MonoDevelop.Core.IProgressMonitor monitor, MonoDevelop.Projects.Parser.IParameter param, string newName);" /><MemberType>Method</MemberType><ReturnValue><ReturnType>System.Boolean</ReturnType></ReturnValue><Parameters><Parameter Name="monitor" Type="MonoDevelop.Core.IProgressMonitor" /><Parameter Name="param" Type="MonoDevelop.Projects.Parser.IParameter" /><Parameter Name="newName" Type="System.String" /></Parameters><Docs><param name="monitor">To be added.</param><param name="param">To be added.</param><param name="newName">To be added.</param><summary>To be added.</summary><returns>To be added.</returns><remarks>To be added.</remarks></Docs></Member><Member MemberName="RenameVariable"><MemberSignature Language="C#" Value="public bool RenameVariable (MonoDevelop.Core.IProgressMonitor monitor, MonoDevelop.Projects.Parser.LocalVariable var, string newName);" /><MemberType>Method</MemberType><ReturnValue><ReturnType>System.Boolean</ReturnType></ReturnValue><Parameters><Parameter Name="monitor" Type="MonoDevelop.Core.IProgressMonitor" /><Parameter Name="var" Type="MonoDevelop.Projects.Parser.LocalVariable" /><Parameter Name="newName" Type="System.String" /></Parameters><Docs><param name="monitor">To be added.</param><param name="var">To be added.</param><param name="newName">To be added.</param><summary>To be added.</summary><returns>To be added.</returns><remarks>To be added.</remarks></Docs></Member></Members>
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
</Type>
