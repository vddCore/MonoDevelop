<Type Name="BaseRefactorer" FullName="MonoDevelop.Projects.CodeGeneration.BaseRefactorer">
  <TypeSignature Language="C#" Value="public abstract class BaseRefactorer : MonoDevelop.Projects.CodeGeneration.IRefactorer" />
  <AssemblyInfo>
    <AssemblyName>MonoDevelop.Projects</AssemblyName>
    <AssemblyVersion>0.18.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>MonoDevelop.Projects.CodeGeneration.IRefactorer</InterfaceName>
    </Interface>
  </Interfaces>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected BaseRefactorer ();" />
      <MemberType>Constructor</MemberType>
      <Parameters />
      <Docs><summary>To be added.</summary><remarks>To be added.</remarks></Docs>
    </Member>
    
    <Member MemberName="CreateClass">
      <MemberSignature Language="C#" Value="public MonoDevelop.Projects.Parser.IClass CreateClass (MonoDevelop.Projects.CodeGeneration.RefactorerContext ctx, string directory, string namspace, System.CodeDom.CodeTypeDeclaration type);" />
      <MemberType>Method</MemberType>
      <ReturnValue><ReturnType>MonoDevelop.Projects.Parser.IClass</ReturnType></ReturnValue>
      <Parameters><Parameter Name="ctx" Type="MonoDevelop.Projects.CodeGeneration.RefactorerContext" /><Parameter Name="directory" Type="System.String" /><Parameter Name="namspace" Type="System.String" /><Parameter Name="type" Type="System.CodeDom.CodeTypeDeclaration" /></Parameters>
      <Docs><param name="ctx">To be added.</param><param name="directory">To be added.</param><param name="namspace">To be added.</param><param name="type">To be added.</param><summary>To be added.</summary><returns>To be added.</returns><remarks>To be added.</remarks></Docs>
    </Member>
    <Member MemberName="RenameClass">
      <MemberSignature Language="C#" Value="public virtual MonoDevelop.Projects.Parser.IClass RenameClass (MonoDevelop.Projects.CodeGeneration.RefactorerContext ctx, MonoDevelop.Projects.Parser.IClass cls, string newName);" />
      <MemberType>Method</MemberType>
      <ReturnValue><ReturnType>MonoDevelop.Projects.Parser.IClass</ReturnType></ReturnValue>
      <Parameters><Parameter Name="ctx" Type="MonoDevelop.Projects.CodeGeneration.RefactorerContext" /><Parameter Name="cls" Type="MonoDevelop.Projects.Parser.IClass" /><Parameter Name="newName" Type="System.String" /></Parameters>
      <Docs><param name="ctx">To be added.</param><param name="cls">To be added.</param><param name="newName">To be added.</param><summary>To be added.</summary><returns>To be added.</returns><remarks>To be added.</remarks></Docs>
    </Member>
    <Member MemberName="FindClassReferences">
      <MemberSignature Language="C#" Value="public virtual MonoDevelop.Projects.CodeGeneration.MemberReferenceCollection FindClassReferences (MonoDevelop.Projects.CodeGeneration.RefactorerContext ctx, string file, MonoDevelop.Projects.Parser.IClass cls);" />
      <MemberType>Method</MemberType>
      <ReturnValue><ReturnType>MonoDevelop.Projects.CodeGeneration.MemberReferenceCollection</ReturnType></ReturnValue>
      <Parameters><Parameter Name="ctx" Type="MonoDevelop.Projects.CodeGeneration.RefactorerContext" /><Parameter Name="file" Type="System.String" /><Parameter Name="cls" Type="MonoDevelop.Projects.Parser.IClass" /></Parameters>
      <Docs><param name="ctx">To be added.</param><param name="file">To be added.</param><param name="cls">To be added.</param><summary>To be added.</summary><returns>To be added.</returns><remarks>To be added.</remarks></Docs>
    </Member>
    <Member MemberName="AddMember">
      <MemberSignature Language="C#" Value="public virtual MonoDevelop.Projects.Parser.IMember AddMember (MonoDevelop.Projects.CodeGeneration.RefactorerContext ctx, MonoDevelop.Projects.Parser.IClass cls, System.CodeDom.CodeTypeMember member);" />
      <MemberType>Method</MemberType>
      <ReturnValue><ReturnType>MonoDevelop.Projects.Parser.IMember</ReturnType></ReturnValue>
      <Parameters><Parameter Name="ctx" Type="MonoDevelop.Projects.CodeGeneration.RefactorerContext" /><Parameter Name="cls" Type="MonoDevelop.Projects.Parser.IClass" /><Parameter Name="member" Type="System.CodeDom.CodeTypeMember" /></Parameters>
      <Docs><param name="ctx">To be added.</param><param name="cls">To be added.</param><param name="member">To be added.</param><summary>To be added.</summary><returns>To be added.</returns><remarks>To be added.</remarks></Docs>
    </Member>
    <Member MemberName="RemoveMember">
      <MemberSignature Language="C#" Value="public virtual void RemoveMember (MonoDevelop.Projects.CodeGeneration.RefactorerContext ctx, MonoDevelop.Projects.Parser.IClass cls, MonoDevelop.Projects.Parser.IMember member);" />
      <MemberType>Method</MemberType>
      <ReturnValue><ReturnType>System.Void</ReturnType></ReturnValue>
      <Parameters><Parameter Name="ctx" Type="MonoDevelop.Projects.CodeGeneration.RefactorerContext" /><Parameter Name="cls" Type="MonoDevelop.Projects.Parser.IClass" /><Parameter Name="member" Type="MonoDevelop.Projects.Parser.IMember" /></Parameters>
      <Docs><param name="ctx">To be added.</param><param name="cls">To be added.</param><param name="member">To be added.</param><summary>To be added.</summary><remarks>To be added.</remarks></Docs>
    </Member>
    <Member MemberName="ReplaceMember">
      <MemberSignature Language="C#" Value="public virtual MonoDevelop.Projects.Parser.IMember ReplaceMember (MonoDevelop.Projects.CodeGeneration.RefactorerContext ctx, MonoDevelop.Projects.Parser.IClass cls, MonoDevelop.Projects.Parser.IMember oldMember, System.CodeDom.CodeTypeMember memberInfo);" />
      <MemberType>Method</MemberType>
      <ReturnValue><ReturnType>MonoDevelop.Projects.Parser.IMember</ReturnType></ReturnValue>
      <Parameters><Parameter Name="ctx" Type="MonoDevelop.Projects.CodeGeneration.RefactorerContext" /><Parameter Name="cls" Type="MonoDevelop.Projects.Parser.IClass" /><Parameter Name="oldMember" Type="MonoDevelop.Projects.Parser.IMember" /><Parameter Name="memberInfo" Type="System.CodeDom.CodeTypeMember" /></Parameters>
      <Docs><param name="ctx">To be added.</param><param name="cls">To be added.</param><param name="oldMember">To be added.</param><param name="memberInfo">To be added.</param><summary>To be added.</summary><returns>To be added.</returns><remarks>To be added.</remarks></Docs>
    </Member>
    <Member MemberName="RenameMember">
      <MemberSignature Language="C#" Value="public virtual MonoDevelop.Projects.Parser.IMember RenameMember (MonoDevelop.Projects.CodeGeneration.RefactorerContext ctx, MonoDevelop.Projects.Parser.IClass cls, MonoDevelop.Projects.Parser.IMember member, string newName);" />
      <MemberType>Method</MemberType>
      <ReturnValue><ReturnType>MonoDevelop.Projects.Parser.IMember</ReturnType></ReturnValue>
      <Parameters><Parameter Name="ctx" Type="MonoDevelop.Projects.CodeGeneration.RefactorerContext" /><Parameter Name="cls" Type="MonoDevelop.Projects.Parser.IClass" /><Parameter Name="member" Type="MonoDevelop.Projects.Parser.IMember" /><Parameter Name="newName" Type="System.String" /></Parameters>
      <Docs><param name="ctx">To be added.</param><param name="cls">To be added.</param><param name="member">To be added.</param><param name="newName">To be added.</param><summary>To be added.</summary><returns>To be added.</returns><remarks>To be added.</remarks></Docs>
    </Member>
    <Member MemberName="FindMemberReferences">
      <MemberSignature Language="C#" Value="public virtual MonoDevelop.Projects.CodeGeneration.MemberReferenceCollection FindMemberReferences (MonoDevelop.Projects.CodeGeneration.RefactorerContext ctx, string fileName, MonoDevelop.Projects.Parser.IClass cls, MonoDevelop.Projects.Parser.IMember member);" />
      <MemberType>Method</MemberType>
      <ReturnValue><ReturnType>MonoDevelop.Projects.CodeGeneration.MemberReferenceCollection</ReturnType></ReturnValue>
      <Parameters><Parameter Name="ctx" Type="MonoDevelop.Projects.CodeGeneration.RefactorerContext" /><Parameter Name="fileName" Type="System.String" /><Parameter Name="cls" Type="MonoDevelop.Projects.Parser.IClass" /><Parameter Name="member" Type="MonoDevelop.Projects.Parser.IMember" /></Parameters>
      <Docs><param name="ctx">To be added.</param><param name="fileName">To be added.</param><param name="cls">To be added.</param><param name="member">To be added.</param><summary>To be added.</summary><returns>To be added.</returns><remarks>To be added.</remarks></Docs>
    </Member>
    <Member MemberName="RenameMethod">
      <MemberSignature Language="C#" Value="protected virtual MonoDevelop.Projects.Parser.IMethod RenameMethod (MonoDevelop.Projects.CodeGeneration.RefactorerContext ctx, MonoDevelop.Projects.Parser.IClass cls, MonoDevelop.Projects.Parser.IMethod method, string newName);" />
      <MemberType>Method</MemberType>
      <ReturnValue><ReturnType>MonoDevelop.Projects.Parser.IMethod</ReturnType></ReturnValue>
      <Parameters><Parameter Name="ctx" Type="MonoDevelop.Projects.CodeGeneration.RefactorerContext" /><Parameter Name="cls" Type="MonoDevelop.Projects.Parser.IClass" /><Parameter Name="method" Type="MonoDevelop.Projects.Parser.IMethod" /><Parameter Name="newName" Type="System.String" /></Parameters>
      <Docs><param name="ctx">To be added.</param><param name="cls">To be added.</param><param name="method">To be added.</param><param name="newName">To be added.</param><summary>To be added.</summary><returns>To be added.</returns><remarks>To be added.</remarks></Docs>
    </Member>
    <Member MemberName="FindMethodReferences">
      <MemberSignature Language="C#" Value="protected virtual MonoDevelop.Projects.CodeGeneration.MemberReferenceCollection FindMethodReferences (MonoDevelop.Projects.CodeGeneration.RefactorerContext ctx, string fileName, MonoDevelop.Projects.Parser.IClass cls, MonoDevelop.Projects.Parser.IMethod method);" />
      <MemberType>Method</MemberType>
      <ReturnValue><ReturnType>MonoDevelop.Projects.CodeGeneration.MemberReferenceCollection</ReturnType></ReturnValue>
      <Parameters><Parameter Name="ctx" Type="MonoDevelop.Projects.CodeGeneration.RefactorerContext" /><Parameter Name="fileName" Type="System.String" /><Parameter Name="cls" Type="MonoDevelop.Projects.Parser.IClass" /><Parameter Name="method" Type="MonoDevelop.Projects.Parser.IMethod" /></Parameters>
      <Docs><param name="ctx">To be added.</param><param name="fileName">To be added.</param><param name="cls">To be added.</param><param name="method">To be added.</param><summary>To be added.</summary><returns>To be added.</returns><remarks>To be added.</remarks></Docs>
    </Member>
    <Member MemberName="RenameField">
      <MemberSignature Language="C#" Value="protected virtual MonoDevelop.Projects.Parser.IField RenameField (MonoDevelop.Projects.CodeGeneration.RefactorerContext ctx, MonoDevelop.Projects.Parser.IClass cls, MonoDevelop.Projects.Parser.IField field, string newName);" />
      <MemberType>Method</MemberType>
      <ReturnValue><ReturnType>MonoDevelop.Projects.Parser.IField</ReturnType></ReturnValue>
      <Parameters><Parameter Name="ctx" Type="MonoDevelop.Projects.CodeGeneration.RefactorerContext" /><Parameter Name="cls" Type="MonoDevelop.Projects.Parser.IClass" /><Parameter Name="field" Type="MonoDevelop.Projects.Parser.IField" /><Parameter Name="newName" Type="System.String" /></Parameters>
      <Docs><param name="ctx">To be added.</param><param name="cls">To be added.</param><param name="field">To be added.</param><param name="newName">To be added.</param><summary>To be added.</summary><returns>To be added.</returns><remarks>To be added.</remarks></Docs>
    </Member>
    <Member MemberName="FindFieldReferences">
      <MemberSignature Language="C#" Value="protected virtual MonoDevelop.Projects.CodeGeneration.MemberReferenceCollection FindFieldReferences (MonoDevelop.Projects.CodeGeneration.RefactorerContext ctx, string fileName, MonoDevelop.Projects.Parser.IClass cls, MonoDevelop.Projects.Parser.IField field);" />
      <MemberType>Method</MemberType>
      <ReturnValue><ReturnType>MonoDevelop.Projects.CodeGeneration.MemberReferenceCollection</ReturnType></ReturnValue>
      <Parameters><Parameter Name="ctx" Type="MonoDevelop.Projects.CodeGeneration.RefactorerContext" /><Parameter Name="fileName" Type="System.String" /><Parameter Name="cls" Type="MonoDevelop.Projects.Parser.IClass" /><Parameter Name="field" Type="MonoDevelop.Projects.Parser.IField" /></Parameters>
      <Docs><param name="ctx">To be added.</param><param name="fileName">To be added.</param><param name="cls">To be added.</param><param name="field">To be added.</param><summary>To be added.</summary><returns>To be added.</returns><remarks>To be added.</remarks></Docs>
    </Member>
    <Member MemberName="RenameProperty">
      <MemberSignature Language="C#" Value="protected virtual MonoDevelop.Projects.Parser.IProperty RenameProperty (MonoDevelop.Projects.CodeGeneration.RefactorerContext ctx, MonoDevelop.Projects.Parser.IClass cls, MonoDevelop.Projects.Parser.IProperty property, string newName);" />
      <MemberType>Method</MemberType>
      <ReturnValue><ReturnType>MonoDevelop.Projects.Parser.IProperty</ReturnType></ReturnValue>
      <Parameters><Parameter Name="ctx" Type="MonoDevelop.Projects.CodeGeneration.RefactorerContext" /><Parameter Name="cls" Type="MonoDevelop.Projects.Parser.IClass" /><Parameter Name="property" Type="MonoDevelop.Projects.Parser.IProperty" /><Parameter Name="newName" Type="System.String" /></Parameters>
      <Docs><param name="ctx">To be added.</param><param name="cls">To be added.</param><param name="property">To be added.</param><param name="newName">To be added.</param><summary>To be added.</summary><returns>To be added.</returns><remarks>To be added.</remarks></Docs>
    </Member>
    <Member MemberName="FindPropertyReferences">
      <MemberSignature Language="C#" Value="protected virtual MonoDevelop.Projects.CodeGeneration.MemberReferenceCollection FindPropertyReferences (MonoDevelop.Projects.CodeGeneration.RefactorerContext ctx, string fileName, MonoDevelop.Projects.Parser.IClass cls, MonoDevelop.Projects.Parser.IProperty property);" />
      <MemberType>Method</MemberType>
      <ReturnValue><ReturnType>MonoDevelop.Projects.CodeGeneration.MemberReferenceCollection</ReturnType></ReturnValue>
      <Parameters><Parameter Name="ctx" Type="MonoDevelop.Projects.CodeGeneration.RefactorerContext" /><Parameter Name="fileName" Type="System.String" /><Parameter Name="cls" Type="MonoDevelop.Projects.Parser.IClass" /><Parameter Name="property" Type="MonoDevelop.Projects.Parser.IProperty" /></Parameters>
      <Docs><param name="ctx">To be added.</param><param name="fileName">To be added.</param><param name="cls">To be added.</param><param name="property">To be added.</param><summary>To be added.</summary><returns>To be added.</returns><remarks>To be added.</remarks></Docs>
    </Member>
    <Member MemberName="RenameEvent">
      <MemberSignature Language="C#" Value="protected virtual MonoDevelop.Projects.Parser.IEvent RenameEvent (MonoDevelop.Projects.CodeGeneration.RefactorerContext ctx, MonoDevelop.Projects.Parser.IClass cls, MonoDevelop.Projects.Parser.IEvent evnt, string newName);" />
      <MemberType>Method</MemberType>
      <ReturnValue><ReturnType>MonoDevelop.Projects.Parser.IEvent</ReturnType></ReturnValue>
      <Parameters><Parameter Name="ctx" Type="MonoDevelop.Projects.CodeGeneration.RefactorerContext" /><Parameter Name="cls" Type="MonoDevelop.Projects.Parser.IClass" /><Parameter Name="evnt" Type="MonoDevelop.Projects.Parser.IEvent" /><Parameter Name="newName" Type="System.String" /></Parameters>
      <Docs><param name="ctx">To be added.</param><param name="cls">To be added.</param><param name="evnt">To be added.</param><param name="newName">To be added.</param><summary>To be added.</summary><returns>To be added.</returns><remarks>To be added.</remarks></Docs>
    </Member>
    <Member MemberName="FindEventReferences">
      <MemberSignature Language="C#" Value="protected virtual MonoDevelop.Projects.CodeGeneration.MemberReferenceCollection FindEventReferences (MonoDevelop.Projects.CodeGeneration.RefactorerContext ctx, string fileName, MonoDevelop.Projects.Parser.IClass cls, MonoDevelop.Projects.Parser.IEvent evnt);" />
      <MemberType>Method</MemberType>
      <ReturnValue><ReturnType>MonoDevelop.Projects.CodeGeneration.MemberReferenceCollection</ReturnType></ReturnValue>
      <Parameters><Parameter Name="ctx" Type="MonoDevelop.Projects.CodeGeneration.RefactorerContext" /><Parameter Name="fileName" Type="System.String" /><Parameter Name="cls" Type="MonoDevelop.Projects.Parser.IClass" /><Parameter Name="evnt" Type="MonoDevelop.Projects.Parser.IEvent" /></Parameters>
      <Docs><param name="ctx">To be added.</param><param name="fileName">To be added.</param><param name="cls">To be added.</param><param name="evnt">To be added.</param><summary>To be added.</summary><returns>To be added.</returns><remarks>To be added.</remarks></Docs>
    </Member>
    <Member MemberName="GetMemberNamePosition">
      <MemberSignature Language="C#" Value="protected virtual int GetMemberNamePosition (MonoDevelop.Projects.Text.IEditableTextFile file, MonoDevelop.Projects.Parser.IMember member);" />
      <MemberType>Method</MemberType>
      <ReturnValue><ReturnType>System.Int32</ReturnType></ReturnValue>
      <Parameters><Parameter Name="file" Type="MonoDevelop.Projects.Text.IEditableTextFile" /><Parameter Name="member" Type="MonoDevelop.Projects.Parser.IMember" /></Parameters>
      <Docs><param name="file">To be added.</param><param name="member">To be added.</param><summary>To be added.</summary><returns>To be added.</returns><remarks>To be added.</remarks></Docs>
    </Member>
    
    <Member MemberName="GenerateCodeFromMember">
      <MemberSignature Language="C#" Value="protected virtual string GenerateCodeFromMember (System.CodeDom.CodeTypeMember member);" />
      <MemberType>Method</MemberType>
      <ReturnValue><ReturnType>System.String</ReturnType></ReturnValue>
      <Parameters><Parameter Name="member" Type="System.CodeDom.CodeTypeMember" /></Parameters>
      <Docs><param name="member">To be added.</param><summary>To be added.</summary><returns>To be added.</returns><remarks>To be added.</remarks></Docs>
    </Member>
    <Member MemberName="GetGeneratedClass">
      <MemberSignature Language="C#" Value="protected MonoDevelop.Projects.Parser.IClass GetGeneratedClass (MonoDevelop.Projects.CodeGeneration.RefactorerContext ctx, MonoDevelop.Projects.Text.IEditableTextFile buffer, MonoDevelop.Projects.Parser.IClass cls);" />
      <MemberType>Method</MemberType>
      <ReturnValue><ReturnType>MonoDevelop.Projects.Parser.IClass</ReturnType></ReturnValue>
      <Parameters><Parameter Name="ctx" Type="MonoDevelop.Projects.CodeGeneration.RefactorerContext" /><Parameter Name="buffer" Type="MonoDevelop.Projects.Text.IEditableTextFile" /><Parameter Name="cls" Type="MonoDevelop.Projects.Parser.IClass" /></Parameters>
      <Docs><param name="ctx">To be added.</param><param name="buffer">To be added.</param><param name="cls">To be added.</param><summary>To be added.</summary><returns>To be added.</returns><remarks>To be added.</remarks></Docs>
    </Member>
    
    <Member MemberName="RemoveIndent">
      <MemberSignature Language="C#" Value="protected string RemoveIndent (string code);" />
      <MemberType>Method</MemberType>
      <ReturnValue><ReturnType>System.String</ReturnType></ReturnValue>
      <Parameters><Parameter Name="code" Type="System.String" /></Parameters>
      <Docs><param name="code">To be added.</param><summary>To be added.</summary><returns>To be added.</returns><remarks>To be added.</remarks></Docs>
    </Member>
    <Member MemberName="Indent">
      <MemberSignature Language="C#" Value="protected string Indent (string code, string indent, bool indentFirstLine);" />
      <MemberType>Method</MemberType>
      <ReturnValue><ReturnType>System.String</ReturnType></ReturnValue>
      <Parameters><Parameter Name="code" Type="System.String" /><Parameter Name="indent" Type="System.String" /><Parameter Name="indentFirstLine" Type="System.Boolean" /></Parameters>
      <Docs><param name="code">To be added.</param><param name="indent">To be added.</param><param name="indentFirstLine">To be added.</param><summary>To be added.</summary><returns>To be added.</returns><remarks>To be added.</remarks></Docs>
    </Member>
    <Member MemberName="GetNewMemberPosition">
      <MemberSignature Language="C#" Value="protected virtual int GetNewMemberPosition (MonoDevelop.Projects.Text.IEditableTextFile buffer, MonoDevelop.Projects.Parser.IClass cls, System.CodeDom.CodeTypeMember member);" />
      <MemberType>Method</MemberType>
      <ReturnValue><ReturnType>System.Int32</ReturnType></ReturnValue>
      <Parameters><Parameter Name="buffer" Type="MonoDevelop.Projects.Text.IEditableTextFile" /><Parameter Name="cls" Type="MonoDevelop.Projects.Parser.IClass" /><Parameter Name="member" Type="System.CodeDom.CodeTypeMember" /></Parameters>
      <Docs><param name="buffer">To be added.</param><param name="cls">To be added.</param><param name="member">To be added.</param><summary>To be added.</summary><returns>To be added.</returns><remarks>To be added.</remarks></Docs>
    </Member>
    <Member MemberName="GetNewFieldPosition">
      <MemberSignature Language="C#" Value="protected virtual int GetNewFieldPosition (MonoDevelop.Projects.Text.IEditableTextFile buffer, MonoDevelop.Projects.Parser.IClass cls);" />
      <MemberType>Method</MemberType>
      <ReturnValue><ReturnType>System.Int32</ReturnType></ReturnValue>
      <Parameters><Parameter Name="buffer" Type="MonoDevelop.Projects.Text.IEditableTextFile" /><Parameter Name="cls" Type="MonoDevelop.Projects.Parser.IClass" /></Parameters>
      <Docs><param name="buffer">To be added.</param><param name="cls">To be added.</param><summary>To be added.</summary><returns>To be added.</returns><remarks>To be added.</remarks></Docs>
    </Member>
    <Member MemberName="GetNewMethodPosition">
      <MemberSignature Language="C#" Value="protected virtual int GetNewMethodPosition (MonoDevelop.Projects.Text.IEditableTextFile buffer, MonoDevelop.Projects.Parser.IClass cls);" />
      <MemberType>Method</MemberType>
      <ReturnValue><ReturnType>System.Int32</ReturnType></ReturnValue>
      <Parameters><Parameter Name="buffer" Type="MonoDevelop.Projects.Text.IEditableTextFile" /><Parameter Name="cls" Type="MonoDevelop.Projects.Parser.IClass" /></Parameters>
      <Docs><param name="buffer">To be added.</param><param name="cls">To be added.</param><summary>To be added.</summary><returns>To be added.</returns><remarks>To be added.</remarks></Docs>
    </Member>
    <Member MemberName="GetNewPropertyPosition">
      <MemberSignature Language="C#" Value="protected virtual int GetNewPropertyPosition (MonoDevelop.Projects.Text.IEditableTextFile buffer, MonoDevelop.Projects.Parser.IClass cls);" />
      <MemberType>Method</MemberType>
      <ReturnValue><ReturnType>System.Int32</ReturnType></ReturnValue>
      <Parameters><Parameter Name="buffer" Type="MonoDevelop.Projects.Text.IEditableTextFile" /><Parameter Name="cls" Type="MonoDevelop.Projects.Parser.IClass" /></Parameters>
      <Docs><param name="buffer">To be added.</param><param name="cls">To be added.</param><summary>To be added.</summary><returns>To be added.</returns><remarks>To be added.</remarks></Docs>
    </Member>
    <Member MemberName="GetNewEventPosition">
      <MemberSignature Language="C#" Value="protected virtual int GetNewEventPosition (MonoDevelop.Projects.Text.IEditableTextFile buffer, MonoDevelop.Projects.Parser.IClass cls);" />
      <MemberType>Method</MemberType>
      <ReturnValue><ReturnType>System.Int32</ReturnType></ReturnValue>
      <Parameters><Parameter Name="buffer" Type="MonoDevelop.Projects.Text.IEditableTextFile" /><Parameter Name="cls" Type="MonoDevelop.Projects.Parser.IClass" /></Parameters>
      <Docs><param name="buffer">To be added.</param><param name="cls">To be added.</param><summary>To be added.</summary><returns>To be added.</returns><remarks>To be added.</remarks></Docs>
    </Member>
    <Member MemberName="GetNextLine">
      <MemberSignature Language="C#" Value="protected virtual int GetNextLine (MonoDevelop.Projects.Text.IEditableTextFile buffer, int pos);" />
      <MemberType>Method</MemberType>
      <ReturnValue><ReturnType>System.Int32</ReturnType></ReturnValue>
      <Parameters><Parameter Name="buffer" Type="MonoDevelop.Projects.Text.IEditableTextFile" /><Parameter Name="pos" Type="System.Int32" /></Parameters>
      <Docs><param name="buffer">To be added.</param><param name="pos">To be added.</param><summary>To be added.</summary><returns>To be added.</returns><remarks>To be added.</remarks></Docs>
    </Member>
    <Member MemberName="GetLineIndent">
      <MemberSignature Language="C#" Value="protected string GetLineIndent (MonoDevelop.Projects.Text.IEditableTextFile buffer, int line);" />
      <MemberType>Method</MemberType>
      <ReturnValue><ReturnType>System.String</ReturnType></ReturnValue>
      <Parameters><Parameter Name="buffer" Type="MonoDevelop.Projects.Text.IEditableTextFile" /><Parameter Name="line" Type="System.Int32" /></Parameters>
      <Docs><param name="buffer">To be added.</param><param name="line">To be added.</param><summary>To be added.</summary><returns>To be added.</returns><remarks>To be added.</remarks></Docs>
    </Member>
    <Member MemberName="SupportedOperations">
      <MemberSignature Language="C#" Value="public virtual MonoDevelop.Projects.CodeGeneration.RefactorOperations SupportedOperations { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue><ReturnType>MonoDevelop.Projects.CodeGeneration.RefactorOperations</ReturnType></ReturnValue>
      <Docs><summary>To be added.</summary><value>To be added.</value><remarks>To be added.</remarks></Docs>
    </Member>
  <Member MemberName="ConvertToLanguageTypeName"><MemberSignature Language="C#" Value="public virtual string ConvertToLanguageTypeName (string netTypeName);" /><MemberType>Method</MemberType><ReturnValue><ReturnType>System.String</ReturnType></ReturnValue><Parameters><Parameter Name="netTypeName" Type="System.String" /></Parameters><Docs><param name="netTypeName">To be added.</param><summary>To be added.</summary><returns>To be added.</returns><remarks>To be added.</remarks></Docs></Member><Member MemberName="EncapsulateField"><MemberSignature Language="C#" Value="public virtual MonoDevelop.Projects.Parser.IMember EncapsulateField (MonoDevelop.Projects.CodeGeneration.RefactorerContext ctx, MonoDevelop.Projects.Parser.IClass cls, MonoDevelop.Projects.Parser.IField field, string propName);" /><MemberType>Method</MemberType><ReturnValue><ReturnType>MonoDevelop.Projects.Parser.IMember</ReturnType></ReturnValue><Parameters><Parameter Name="ctx" Type="MonoDevelop.Projects.CodeGeneration.RefactorerContext" /><Parameter Name="cls" Type="MonoDevelop.Projects.Parser.IClass" /><Parameter Name="field" Type="MonoDevelop.Projects.Parser.IField" /><Parameter Name="propName" Type="System.String" /></Parameters><Docs><param name="ctx">To be added.</param><param name="cls">To be added.</param><param name="field">To be added.</param><param name="propName">To be added.</param><summary>To be added.</summary><returns>To be added.</returns><remarks>To be added.</remarks></Docs></Member><Member MemberName="EncapsulateFieldImpGetSet"><MemberSignature Language="C#" Value="protected virtual void EncapsulateFieldImpGetSet (MonoDevelop.Projects.CodeGeneration.RefactorerContext ctx, MonoDevelop.Projects.Parser.IClass cls, MonoDevelop.Projects.Parser.IField field, System.CodeDom.CodeMemberProperty prop);" /><MemberType>Method</MemberType><ReturnValue><ReturnType>System.Void</ReturnType></ReturnValue><Parameters><Parameter Name="ctx" Type="MonoDevelop.Projects.CodeGeneration.RefactorerContext" /><Parameter Name="cls" Type="MonoDevelop.Projects.Parser.IClass" /><Parameter Name="field" Type="MonoDevelop.Projects.Parser.IField" /><Parameter Name="prop" Type="System.CodeDom.CodeMemberProperty" /></Parameters><Docs><param name="ctx">To be added.</param><param name="cls">To be added.</param><param name="field">To be added.</param><param name="prop">To be added.</param><summary>To be added.</summary><remarks>To be added.</remarks></Docs></Member><Member MemberName="FindGeneratedMember"><MemberSignature Language="C#" Value="protected MonoDevelop.Projects.Parser.IMember FindGeneratedMember (MonoDevelop.Projects.CodeGeneration.RefactorerContext ctx, MonoDevelop.Projects.Text.IEditableTextFile buffer, MonoDevelop.Projects.Parser.IClass cls, System.CodeDom.CodeTypeMember member, int line);" /><MemberType>Method</MemberType><ReturnValue><ReturnType>MonoDevelop.Projects.Parser.IMember</ReturnType></ReturnValue><Parameters><Parameter Name="ctx" Type="MonoDevelop.Projects.CodeGeneration.RefactorerContext" /><Parameter Name="buffer" Type="MonoDevelop.Projects.Text.IEditableTextFile" /><Parameter Name="cls" Type="MonoDevelop.Projects.Parser.IClass" /><Parameter Name="member" Type="System.CodeDom.CodeTypeMember" /><Parameter Name="line" Type="System.Int32" /></Parameters><Docs><param name="ctx">To be added.</param><param name="buffer">To be added.</param><param name="cls">To be added.</param><param name="member">To be added.</param><param name="line">To be added.</param><summary>To be added.</summary><returns>To be added.</returns><remarks>To be added.</remarks></Docs></Member><Member MemberName="FindParameterReferences"><MemberSignature Language="C#" Value="public virtual MonoDevelop.Projects.CodeGeneration.MemberReferenceCollection FindParameterReferences (MonoDevelop.Projects.CodeGeneration.RefactorerContext ctx, string fileName, MonoDevelop.Projects.Parser.IParameter param);" /><MemberType>Method</MemberType><ReturnValue><ReturnType>MonoDevelop.Projects.CodeGeneration.MemberReferenceCollection</ReturnType></ReturnValue><Parameters><Parameter Name="ctx" Type="MonoDevelop.Projects.CodeGeneration.RefactorerContext" /><Parameter Name="fileName" Type="System.String" /><Parameter Name="param" Type="MonoDevelop.Projects.Parser.IParameter" /></Parameters><Docs><param name="ctx">To be added.</param><param name="fileName">To be added.</param><param name="param">To be added.</param><summary>To be added.</summary><returns>To be added.</returns><remarks>To be added.</remarks></Docs></Member><Member MemberName="FindVariableReferences"><MemberSignature Language="C#" Value="public virtual MonoDevelop.Projects.CodeGeneration.MemberReferenceCollection FindVariableReferences (MonoDevelop.Projects.CodeGeneration.RefactorerContext ctx, string fileName, MonoDevelop.Projects.Parser.LocalVariable var);" /><MemberType>Method</MemberType><ReturnValue><ReturnType>MonoDevelop.Projects.CodeGeneration.MemberReferenceCollection</ReturnType></ReturnValue><Parameters><Parameter Name="ctx" Type="MonoDevelop.Projects.CodeGeneration.RefactorerContext" /><Parameter Name="fileName" Type="System.String" /><Parameter Name="var" Type="MonoDevelop.Projects.Parser.LocalVariable" /></Parameters><Docs><param name="ctx">To be added.</param><param name="fileName">To be added.</param><param name="var">To be added.</param><summary>To be added.</summary><returns>To be added.</returns><remarks>To be added.</remarks></Docs></Member><Member MemberName="GetCodeDomProvider"><MemberSignature Language="C#" Value="protected abstract System.CodeDom.Compiler.CodeDomProvider GetCodeDomProvider ();" /><MemberType>Method</MemberType><ReturnValue><ReturnType>System.CodeDom.Compiler.CodeDomProvider</ReturnType></ReturnValue><Parameters /><Docs><summary>To be added.</summary><returns>To be added.</returns><remarks>To be added.</remarks></Docs></Member><Member MemberName="GetMemberBounds"><MemberSignature Language="C#" Value="protected virtual MonoDevelop.Projects.Parser.IRegion GetMemberBounds (MonoDevelop.Projects.Text.IEditableTextFile file, MonoDevelop.Projects.Parser.IMember member);" /><MemberType>Method</MemberType><ReturnValue><ReturnType>MonoDevelop.Projects.Parser.IRegion</ReturnType></ReturnValue><Parameters><Parameter Name="file" Type="MonoDevelop.Projects.Text.IEditableTextFile" /><Parameter Name="member" Type="MonoDevelop.Projects.Parser.IMember" /></Parameters><Docs><param name="file">To be added.</param><param name="member">To be added.</param><summary>To be added.</summary><returns>To be added.</returns><remarks>To be added.</remarks></Docs></Member><Member MemberName="GetOptions"><MemberSignature Language="C#" Value="protected virtual System.CodeDom.Compiler.CodeGeneratorOptions GetOptions (bool isMethod);" /><MemberType>Method</MemberType><ReturnValue><ReturnType>System.CodeDom.Compiler.CodeGeneratorOptions</ReturnType></ReturnValue><Parameters><Parameter Name="isMethod" Type="System.Boolean" /></Parameters><Docs><param name="isMethod">To be added.</param><summary>To be added.</summary><returns>To be added.</returns><remarks>To be added.</remarks></Docs></Member><Member MemberName="GetParameterNamePosition"><MemberSignature Language="C#" Value="protected virtual int GetParameterNamePosition (MonoDevelop.Projects.Text.IEditableTextFile file, MonoDevelop.Projects.Parser.IParameter param);" /><MemberType>Method</MemberType><ReturnValue><ReturnType>System.Int32</ReturnType></ReturnValue><Parameters><Parameter Name="file" Type="MonoDevelop.Projects.Text.IEditableTextFile" /><Parameter Name="param" Type="MonoDevelop.Projects.Parser.IParameter" /></Parameters><Docs><param name="file">To be added.</param><param name="param">To be added.</param><summary>To be added.</summary><returns>To be added.</returns><remarks>To be added.</remarks></Docs></Member><Member MemberName="GetVariableNamePosition"><MemberSignature Language="C#" Value="protected virtual int GetVariableNamePosition (MonoDevelop.Projects.Text.IEditableTextFile file, MonoDevelop.Projects.Parser.LocalVariable var);" /><MemberType>Method</MemberType><ReturnValue><ReturnType>System.Int32</ReturnType></ReturnValue><Parameters><Parameter Name="file" Type="MonoDevelop.Projects.Text.IEditableTextFile" /><Parameter Name="var" Type="MonoDevelop.Projects.Parser.LocalVariable" /></Parameters><Docs><param name="file">To be added.</param><param name="var">To be added.</param><summary>To be added.</summary><returns>To be added.</returns><remarks>To be added.</remarks></Docs></Member><Member MemberName="ImplementMember"><MemberSignature Language="C#" Value="public virtual MonoDevelop.Projects.Parser.IMember ImplementMember (MonoDevelop.Projects.CodeGeneration.RefactorerContext ctx, MonoDevelop.Projects.Parser.IClass cls, MonoDevelop.Projects.Parser.IMember member, MonoDevelop.Projects.Parser.IReturnType privateImplementationType);" /><MemberType>Method</MemberType><ReturnValue><ReturnType>MonoDevelop.Projects.Parser.IMember</ReturnType></ReturnValue><Parameters><Parameter Name="ctx" Type="MonoDevelop.Projects.CodeGeneration.RefactorerContext" /><Parameter Name="cls" Type="MonoDevelop.Projects.Parser.IClass" /><Parameter Name="member" Type="MonoDevelop.Projects.Parser.IMember" /><Parameter Name="privateImplementationType" Type="MonoDevelop.Projects.Parser.IReturnType" /></Parameters><Docs><param name="ctx">To be added.</param><param name="cls">To be added.</param><param name="member">To be added.</param><param name="privateImplementationType">To be added.</param><summary>To be added.</summary><returns>To be added.</returns><remarks>To be added.</remarks></Docs></Member><Member MemberName="RenameParameter"><MemberSignature Language="C#" Value="public virtual bool RenameParameter (MonoDevelop.Projects.CodeGeneration.RefactorerContext ctx, MonoDevelop.Projects.Parser.IParameter param, string newName);" /><MemberType>Method</MemberType><ReturnValue><ReturnType>System.Boolean</ReturnType></ReturnValue><Parameters><Parameter Name="ctx" Type="MonoDevelop.Projects.CodeGeneration.RefactorerContext" /><Parameter Name="param" Type="MonoDevelop.Projects.Parser.IParameter" /><Parameter Name="newName" Type="System.String" /></Parameters><Docs><param name="ctx">To be added.</param><param name="param">To be added.</param><param name="newName">To be added.</param><summary>To be added.</summary><returns>To be added.</returns><remarks>To be added.</remarks></Docs></Member><Member MemberName="RenameVariable"><MemberSignature Language="C#" Value="public virtual bool RenameVariable (MonoDevelop.Projects.CodeGeneration.RefactorerContext ctx, MonoDevelop.Projects.Parser.LocalVariable var, string newName);" /><MemberType>Method</MemberType><ReturnValue><ReturnType>System.Boolean</ReturnType></ReturnValue><Parameters><Parameter Name="ctx" Type="MonoDevelop.Projects.CodeGeneration.RefactorerContext" /><Parameter Name="var" Type="MonoDevelop.Projects.Parser.LocalVariable" /><Parameter Name="newName" Type="System.String" /></Parameters><Docs><param name="ctx">To be added.</param><param name="var">To be added.</param><param name="newName">To be added.</param><summary>To be added.</summary><returns>To be added.</returns><remarks>To be added.</remarks></Docs></Member><Member MemberName="ReturnTypeToDom"><MemberSignature Language="C#" Value="protected System.CodeDom.CodeTypeReference ReturnTypeToDom (MonoDevelop.Projects.CodeGeneration.RefactorerContext ctx, MonoDevelop.Projects.Parser.IReturnType declaredType);" /><MemberType>Method</MemberType><ReturnValue><ReturnType>System.CodeDom.CodeTypeReference</ReturnType></ReturnValue><Parameters><Parameter Name="ctx" Type="MonoDevelop.Projects.CodeGeneration.RefactorerContext" /><Parameter Name="declaredType" Type="MonoDevelop.Projects.Parser.IReturnType" /></Parameters><Docs><param name="ctx">To be added.</param><param name="declaredType">To be added.</param><summary>To be added.</summary><returns>To be added.</returns><remarks>To be added.</remarks></Docs></Member><Member MemberName="TypeToDom"><MemberSignature Language="C#" Value="protected System.CodeDom.CodeTypeReference TypeToDom (MonoDevelop.Projects.CodeGeneration.RefactorerContext ctx, Type type);" /><MemberType>Method</MemberType><ReturnValue><ReturnType>System.CodeDom.CodeTypeReference</ReturnType></ReturnValue><Parameters><Parameter Name="ctx" Type="MonoDevelop.Projects.CodeGeneration.RefactorerContext" /><Parameter Name="type" Type="System.Type" /></Parameters><Docs><param name="ctx">To be added.</param><param name="type">To be added.</param><summary>To be added.</summary><returns>To be added.</returns><remarks>To be added.</remarks></Docs></Member></Members>
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
</Type>
