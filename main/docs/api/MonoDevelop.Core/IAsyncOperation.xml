<Type Name="IAsyncOperation" FullName="MonoDevelop.Core.IAsyncOperation">
  <TypeSignature Language="C#" Value="public interface IAsyncOperation" />
  <AssemblyInfo>
    <AssemblyName>MonoDevelop.Core</AssemblyName>
    <AssemblyVersion>0.18.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Members>
    <Member MemberName="Completed">
      <MemberSignature Language="C#" Value="public event MonoDevelop.Core.OperationHandler Completed;" />
      <MemberType>Event</MemberType>
      <ReturnValue><ReturnType>MonoDevelop.Core.OperationHandler</ReturnType></ReturnValue>
      <Docs><summary>Fired when the operation has completed.</summary><remarks>The event is fired if the operation has been successfully or unsuccessfully completed, or if it has been cancelled.</remarks></Docs>
    </Member>
    <Member MemberName="Cancel">
      <MemberSignature Language="C#" Value="public void Cancel ();" />
      <MemberType>Method</MemberType>
      <ReturnValue><ReturnType>System.Void</ReturnType></ReturnValue>
      <Parameters />
      <Docs><summary>Cancels the operation.</summary><remarks>This is a cancel request. The operation may decide to delay or just ignore the request.</remarks></Docs>
    </Member>
    <Member MemberName="WaitForCompleted">
      <MemberSignature Language="C#" Value="public void WaitForCompleted ();" />
      <MemberType>Method</MemberType>
      <ReturnValue><ReturnType>System.Void</ReturnType></ReturnValue>
      <Parameters />
      <Docs><summary>Stops the execution until the operation is completed (or cancelled).</summary><remarks>In some implementations (such as for example the one provided by BaseProgressMonitor), if the current thread is the GTK thread, GTK events will still be executed (the GUI will not freeze).</remarks></Docs>
    </Member>
    <Member MemberName="IsCompleted">
      <MemberSignature Language="C#" Value="public bool IsCompleted { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue><ReturnType>System.Boolean</ReturnType></ReturnValue>
      <Docs><summary>Gets an indication whether the operation has completed.</summary><value>
          <b>true</b> is if the operation has completed. <b>false</b> otherwise.</value><remarks>To be added.</remarks></Docs>
    </Member>
    <Member MemberName="Success">
      <MemberSignature Language="C#" Value="public bool Success { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue><ReturnType>System.Boolean</ReturnType></ReturnValue>
      <Docs><summary>Indicates whether the operation has completed successfully or not.</summary><value>'true' if the operation has completed successfully, 'false' otherwise.</value><remarks>To be added.</remarks></Docs>
    </Member>
  </Members>
  <Docs>
    <summary>Provides methods for checking the status and controlling asynchronous operations.</summary>
    <remarks>To be added.</remarks>
  </Docs>
</Type>
