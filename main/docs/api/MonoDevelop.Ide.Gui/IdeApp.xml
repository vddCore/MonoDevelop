<Type Name="IdeApp" FullName="MonoDevelop.Ide.Gui.IdeApp">
  <TypeSignature Language="C#" Value="public abstract class IdeApp" />
  <AssemblyInfo>
    <AssemblyName>MonoDevelop.Ide</AssemblyName>
    <AssemblyVersion>0.18.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Members>
    <Member MemberName="Initialize">
      <MemberSignature Language="C#" Value="public static void Initialize (MonoDevelop.Core.IProgressMonitor monitor);" />
      <MemberType>Method</MemberType>
      <ReturnValue><ReturnType>System.Void</ReturnType></ReturnValue>
      <Parameters><Parameter Name="monitor" Type="MonoDevelop.Core.IProgressMonitor" /></Parameters>
      <Docs><param name="monitor">Monitor where progress will be reported.</param><summary>Initializes the IDE.</summary><remarks>Initializes the IDE workbench and executes the startup commands. This method must be called only once.</remarks></Docs>
    </Member>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public static void Run ();" />
      <MemberType>Method</MemberType>
      <ReturnValue><ReturnType>System.Void</ReturnType></ReturnValue>
      <Parameters />
      <Docs><summary>Executes the IDE.</summary><remarks /></Docs>
    </Member>
    <Member MemberName="Exit">
      <MemberSignature Language="C#" Value="public static void Exit ();" />
      <MemberType>Method</MemberType>
      <ReturnValue><ReturnType>System.Void</ReturnType></ReturnValue>
      <Parameters />
      <Docs><summary>Ends the exection of the IDE.</summary><remarks /></Docs>
    </Member>
    <Member MemberName="Workbench">
      <MemberSignature Language="C#" Value="public static MonoDevelop.Ide.Gui.Workbench Workbench { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue><ReturnType>MonoDevelop.Ide.Gui.Workbench</ReturnType></ReturnValue>
      <Docs><summary>To be added.</summary><value>To be added.</value><remarks>To be added.</remarks></Docs>
    </Member>
    <Member MemberName="ProjectOperations">
      <MemberSignature Language="C#" Value="public static MonoDevelop.Ide.Gui.ProjectOperations ProjectOperations { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue><ReturnType>MonoDevelop.Ide.Gui.ProjectOperations</ReturnType></ReturnValue>
      <Docs><summary>To be added.</summary><value>To be added.</value><remarks>To be added.</remarks></Docs>
    </Member>
    <Member MemberName="HelpOperations">
      <MemberSignature Language="C#" Value="public static MonoDevelop.Ide.Gui.HelpOperations HelpOperations { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue><ReturnType>MonoDevelop.Ide.Gui.HelpOperations</ReturnType></ReturnValue>
      <Docs><summary>To be added.</summary><value>To be added.</value><remarks>To be added.</remarks></Docs>
    </Member>
    <Member MemberName="CommandService">
      <MemberSignature Language="C#" Value="public static MonoDevelop.Components.Commands.CommandManager CommandService { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue><ReturnType>MonoDevelop.Components.Commands.CommandManager</ReturnType></ReturnValue>
      <Docs><summary>To be added.</summary><value>To be added.</value><remarks>To be added.</remarks></Docs>
    </Member>
  <Member MemberName="Exited"><MemberSignature Language="C#" Value="public static event EventHandler Exited;" /><MemberType>Event</MemberType><ReturnValue><ReturnType>System.EventHandler</ReturnType></ReturnValue><Docs><summary>To be added.</summary><remarks>To be added.</remarks></Docs></Member><Member MemberName="Exiting"><MemberSignature Language="C#" Value="public static event MonoDevelop.Ide.Gui.ExitEventHandler Exiting;" /><MemberType>Event</MemberType><ReturnValue><ReturnType>MonoDevelop.Ide.Gui.ExitEventHandler</ReturnType></ReturnValue><Docs><summary>To be added.</summary><remarks>To be added.</remarks></Docs></Member><Member MemberName="Initialized"><MemberSignature Language="C#" Value="public static event EventHandler Initialized;" /><MemberType>Event</MemberType><ReturnValue><ReturnType>System.EventHandler</ReturnType></ReturnValue><Docs><summary>To be added.</summary><remarks>To be added.</remarks></Docs></Member><Member MemberName="IsInitialized"><MemberSignature Language="C#" Value="public static bool IsInitialized { get; };" /><MemberType>Property</MemberType><ReturnValue><ReturnType>System.Boolean</ReturnType></ReturnValue><Docs><summary>To be added.</summary><value>To be added.</value><remarks>To be added.</remarks></Docs></Member><Member MemberName="Services"><MemberSignature Language="C#" Value="public static MonoDevelop.Ide.Gui.IdeServices Services { get; };" /><MemberType>Property</MemberType><ReturnValue><ReturnType>MonoDevelop.Ide.Gui.IdeServices</ReturnType></ReturnValue><Docs><summary>To be added.</summary><value>To be added.</value><remarks>To be added.</remarks></Docs></Member></Members>
  <Docs>
    <summary>The root IDE class.</summary>
    <remarks>
      <para>
This class provides access to several components, services and methods offered by the IDE. It is the starting point for most of the functionality available to add-ins.
</para>
      <para>
        <example>
          <code lang="C#">
// The following call opens a file into the IDE, writes some text into it.
// First of all, open the document:
Document doc;
doc = IdeApp.Workbench.OpenDocument ("SomeDocument.txt");

// Access to the editor and add some text
IEditableTextBuffer editor = doc.Content as IEditableTextBuffer;
editor.InsertText (0, "Hello world!");

// Save and close the document
doc.Save ();
doc.Close ();
  </code>
        </example>
      </para>
    </remarks>
  </Docs>
</Type>
