<Type Name="AddInService" FullName="MonoDevelop.Core.AddIns.AddInService">
  <TypeSignature Language="C#" Value="public class AddInService" />
  <AssemblyInfo>
    <AssemblyName>MonoDevelop.Core</AssemblyName>
    <AssemblyVersion>0.9.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AddInService ();" />
      <MemberType>Constructor</MemberType>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StartApplication">
      <MemberSignature Language="C#" Value="public int StartApplication (string addinId, string[] parameters);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="addinId" Type="System.String" />
        <Parameter Name="parameters" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="addinId">Identifier of the application.</param>
        <param name="parameters">Arguments to provide to the application.</param>
        <summary>Executes an add-in application.</summary>
        <returns>Status code reported by the application.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAddinLoaded">
      <MemberSignature Language="C#" Value="public bool IsAddinLoaded (string id);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="id">Identifier of the add-in.</param>
        <summary>Indicates whether an add-in has been loaded.</summary>
        <returns>'true' if the add-in has been loaded, 'false' otherwise.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreloadAddins">
      <MemberSignature Language="C#" Value="public void PreloadAddins (MonoDevelop.Core.IProgressMonitor monitor, string[] requestedExtensionPoints);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="monitor" Type="MonoDevelop.Core.IProgressMonitor" />
        <Parameter Name="requestedExtensionPoints" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="monitor">Monitor object where progress will be reported.</param>
        <param name="requestedExtensionPoints">Extension points to be required.</param>
        <summary>Loads the installed add-ins which provide extensions to the specified extension points.</summary>
        <remarks>This method can be used to load add-ins in a controlled way, since add-ins are usually loaded only under demand.
 Errors found during add-in load are reported in the AddInLoadErrors <see cref="M:MonoDevelop.Core.AddIns.AddInService.AddInLoadErrors" /> property.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTreeItems">
      <MemberSignature Language="C#" Value="public object[] GetTreeItems (string path);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">Extension path.</param>
        <summary>Gets an array of objects declared at the specified extension path.</summary>
        <returns>An array with the objects at the specified extension path.</returns>
        <remarks>All add-ins that extend the specified extension point are automatically loaded. Errors found during add-in load are reported in the AddInLoadErrors <see cref="M:MonoDevelop.Core.AddIns.AddInService.AddInLoadErrors" /> property.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTreeItems">
      <MemberSignature Language="C#" Value="public Array GetTreeItems (string path, Type itemType);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Array</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="itemType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="path">Extension path.</param>
        <param name="itemType">To be added.</param>
        <summary>Gets an array of objects declared at the specified extension path.</summary>
        <returns>An array with the objects at the specified extension path.</returns>
        <remarks>All add-ins that extend the specified extension point are automatically loaded. Errors found during add-in load are reported in the AddInLoadErrors <see cref="M:MonoDevelop.Core.AddIns.AddInService.AddInLoadErrors" /> property.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTreeCodons">
      <MemberSignature Language="C#" Value="public object[] GetTreeCodons (string path);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">An extension path.</param>
        <summary>Gets an array of codon objects declared at the specified extension path.</summary>
        <returns>An array with the codon objects at the specified extension path.</returns>
        <remarks>A codon is an object that represents the XML element declared in an XML add-in file. All add-ins that extend the specified extension point are automatically loaded. Errors found during add-in load are reported in the AddInLoadErrors <see cref="M:MonoDevelop.Core.AddIns.AddInService.AddInLoadErrors" /> property.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTreeNode">
      <MemberSignature Language="C#" Value="public MonoDevelop.Core.AddIns.IAddInTreeNode GetTreeNode (string path);" />
      <MemberType>Method</MemberType>
      <ReturnValue>
        <ReturnType>MonoDevelop.Core.AddIns.IAddInTreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">An extension path.</param>
        <summary>Gets the tree node at the specified extension path.</summary>
        <returns>The tree node at the specified extension path.</returns>
        <remarks>All add-ins that extend the specified extension point are automatically loaded. Errors found during add-in load are reported in the AddInLoadErrors <see cref="M:MonoDevelop.Core.AddIns.AddInService.AddInLoadErrors" /> property.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddInLoadErrors">
      <MemberSignature Language="C#" Value="public MonoDevelop.Core.AddIns.AddinError[] AddInLoadErrors { get; };" />
      <MemberType>Property</MemberType>
      <ReturnValue>
        <ReturnType>MonoDevelop.Core.AddIns.AddinError[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The list of errors found while loading add-ins.</summary>
        <value>The list of errors found while loading add-ins.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
  <Docs>
    <summary>This service provides methods for loading add-ins and for getting information about currently loaded add-ins.</summary>
    <remarks>To be added.</remarks>
  </Docs>
</Type>
